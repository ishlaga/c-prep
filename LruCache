/*this is a custom class which was implemented on the top of double linked lists and unordered_map
this class acts as datastructure which evects the least recently used nodes inorder to bring more nodes 
*/

class LRUCache {
public:
    class Node{

    public:
        int key, value;
        Node* prev;
        Node* next;

       
         Node(int key, int value){
            this->key =key;
            this->value = value;
            next = NULL;
            prev = NULL;

         }
    };


    int capacity;
    unordered_map <int , Node* > map;

    Node* head = new Node(0,0);
    Node* tail = new Node(0,0);

    LRUCache(int capacity) {
        this->capacity = capacity ;
        head->next = tail;
        tail->prev = head;
    }

    void deletenode(Node* node){
        node->prev->next = node->next;
        node->next->prev = node->prev;
    }
 

    void insertAtHead(Node* node){

        Node* temp = head->next;
        head->next = node;
        node->prev = head;

        node->next = temp;
        temp->prev = node;

    }
    
    int get(int key) {
        if(map.find(key)== map.end()){
            return -1;
        }
        else {
            Node* rem =  map[key];
            int value=rem->value;

            map.erase(key);
          deletenode(rem) ;
          insertAtHead(rem);

          map[key] = rem ;
          return value;
        }
        
    }
    
    void put(int key, int value) {


    if(map.find(key) != map.end()){
        Node* oldnode = map[key];
        deletenode(oldnode) ;
        map.erase(key);

    }
        
      if (map.size()== capacity){
       map.erase(tail->prev->key);
        deletenode(tail->prev);
      }
      Node* newNode = new Node(key, value);
      insertAtHead(newNode);
      map[key] = newNode;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */